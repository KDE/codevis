---
# SPDX-FileCopyrightText: 2019 Christoph Cullmann <cullmann@kde.org>
# SPDX-FileCopyrightText: 2019 Gernot Gebhard <gebhard@absint.com>
# SPDX-FileCopyrightText: 2022 Codethink Ltd <codethink@codethink.co.uk>
# SPDX-License-Identifier: MIT

# See https://clang.llvm.org/docs/ClangFormatStyleOptions.html for the config options
# and https://community.kde.org/Policies/Frameworks_Coding_Style#Clang-format_automatic_code_formatting
# for clang-format tips & tricks
---
Language: JavaScript
DisableFormat: true
---
Language: Json
DisableFormat: true
---

# Style for C++
Language: Cpp

# base is WebKit coding style: https://webkit.org/code-style-guidelines/
# below are only things set that diverge from this style!
BasedOnStyle: WebKit

# enforce C++17 (e.g. for std::vector<std::vector<lala>>
Standard: Cpp11

# 4 spaces indent
TabWidth: 4

# 80 wide lines, plus a bit extra
ColumnLimit: 120

# sort includes inside line separated groups
SortIncludes: true

# Example of usage:
BreakBeforeBraces: Custom

BraceWrapping:
  AfterClass: false
  AfterControlStatement: false
  AfterEnum: false
  AfterStruct: false
  AfterFunction: true
  SplitEmptyFunction: true
  BeforeCatch: false

# CrlInstruction *a;
PointerAlignment: Right

# Foo& foo
ReferenceAlignment: Left

# horizontally aligns arguments after an open bracket.
AlignAfterOpenBracket: Align

# don't move all parameters to new line
AllowAllParametersOfDeclarationOnNextLine: true

# no single line functions
AllowShortFunctionsOnASingleLine: None

# always break before you encounter multi line strings
AlwaysBreakBeforeMultilineStrings: true

# don't move arguments to own lines if they are not all on the same
BinPackArguments: false

# don't move parameters to own lines if they are not all on the same
BinPackParameters: false

# In case we have an if statement with multiple lines the operator should be at the beginning of the line
# but we do not want to break assignments
BreakBeforeBinaryOperators: NonAssignment

# format C++11 braced lists like function calls
Cpp11BracedListStyle: true

# do not put a space before C++11 braced lists
SpaceBeforeCpp11BracedList: false

# remove empty lines
KeepEmptyLinesAtTheStartOfBlocks: false

# no namespace indentation to keep indent level low
NamespaceIndentation: None

# we use template< without space.
SpaceAfterTemplateKeyword: false

# Always break after template declaration
AlwaysBreakTemplateDeclarations: true

# macros for which the opening brace stays attached.
ForEachMacros: [ foreach, Q_FOREACH, forever, Q_FOREVER, QBENCHMARK, QBENCHMARK_ONCE , wl_resource_for_each, wl_resource_for_each_safe ]

# keep lambda formatting multi-line if not empty
AllowShortLambdasOnASingleLine: Empty

# We do not want clang-format to put all arguments on a new line
AllowAllArgumentsOnNextLine: false

# Indent access modifiers with two spaces
AccessModifierOffset: -2

# Add namespace end comments e.g.
# } // namespace foo
FixNamespaceComments: true

# No space before constructor initializer colon
SpaceBeforeCtorInitializerColon: false

# Break constructor initializers after colon and commas e.g.
# Foo::Foo():
#    initializer1(),
#    initializer2()
BreakConstructorInitializers: AfterColon

# Add a space after C-style cast e.g. (void) foo;
SpaceAfterCStyleCast: true

# Don't reformat clazy comments
CommentPragmas: '^ clazy'

# Either put all constructor initializers on one line or do only one per line
# `PackConstructorInitializers: Never` would be even better but that isn't
# available until clang-format-14
ConstructorInitializerAllOnOneLineOrOnePerLine: true
