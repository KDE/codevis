// ct_lvtplg_basicpluginhooks.h                                         -*-C++-*-

// Copyright 2023 Codethink Ltd <codethink@codethink.co.uk>
// SPDX-License-Identifier: Apache-2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// This file is automatically generated. Do not modify it directly - Use the generator file instead.
#ifndef DIAGRAM_SERVER_CT_LVTPLG_BASICPLUGINHOOKS_H
#define DIAGRAM_SERVER_CT_LVTPLG_BASICPLUGINHOOKS_H

#ifdef _WIN32
#define _EXPORT_AS_C extern "C" __declspec(dllexport)
#else
#define _EXPORT_AS_C extern "C"
#endif

#define REGISTER_HOOK(_hookName, _handlerType)                                                                         \
    struct _handlerType;                                                                                               \
    typedef void (*_hookName##_f)(_handlerType *);                                                                     \
    _EXPORT_AS_C void _hookName(_handlerType *);

// This hook is called as soon as the application initializes, and should be used to setup plugin data structures.
REGISTER_HOOK(hookSetupPlugin, PluginSetupHandler);

// This hook is called just before the application closes, and must be used to cleanup any resource the plugin acquired.
REGISTER_HOOK(hookTeardownPlugin, PluginSetupHandler);

// Hook to control the graphics view context menu.
REGISTER_HOOK(hookGraphicsViewContextMenu, PluginContextMenuHandler);

// Can be used to setup new dock widgets (See PluginDockWidgetHandler)
REGISTER_HOOK(hookSetupDockWidget, PluginDockWidgetHandler);

// If implemented, will generate an action in the reports menu to create a HTML report.
REGISTER_HOOK(hookSetupEntityReport, PluginEntityReportHandler);

// Called every time a header is found in the physical parser.
REGISTER_HOOK(hookPhysicalParserOnHeaderFound, PluginPhysicalParserOnHeaderFoundHandler);

// Called every time a comment is found in the logical parser.
REGISTER_HOOK(hookLogicalParserOnCppCommentFound, PluginLogicalParserOnCppCommentFoundHandler);

// Called after the Physical and Logical (if enabled) parsing are done.
REGISTER_HOOK(hookOnParseCompleted, PluginParseCompletedHandler);

// Called when the active scene is changed in the GUI.
REGISTER_HOOK(hookActiveSceneChanged, PluginActiveSceneChangedHandler);

// Called when the main node of a given graphics scene has changed.
REGISTER_HOOK(hookMainNodeChanged, PluginMainNodeChangedHandler);

#undef REGISTER_HOOK
#undef _EXPORT_AS_C

#endif