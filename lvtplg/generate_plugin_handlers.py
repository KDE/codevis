import sys
from handlers import HANDLERS


if __name__ == "__main__":
    # Note: Please don't use JINJA for code generation, since some users don't have it installed.
    output_path = sys.argv[1]
    filename = 'ct_lvtplg_basicpluginhandlers.h'

    contents = []
    contents.append("// This file is automatically generated. Do not modify it directly - Use the generator file instead.")
    contents.append('')
    contents.append('')

    contents.append(f"// ct_lvtplg_{filename}.h                                         -*-C++-*-")
    contents.append('')
    contents.append('// Copyright 2023 Codethink Ltd <codethink@codethink.co.uk>')
    contents.append('// SPDX-License-Identifier: Apache-2.0')
    contents.append('//')
    contents.append('// Licensed under the Apache License, Version 2.0 (the "License");')
    contents.append('// you may not use this file except in compliance with the License.')
    contents.append('// You may obtain a copy of the License at')
    contents.append('//')
    contents.append('//     http://www.apache.org/licenses/LICENSE-2.0')
    contents.append('//')
    contents.append('// Unless required by applicable law or agreed to in writing, software')
    contents.append('// distributed under the License is distributed on an "AS IS" BASIS,')
    contents.append('// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.')
    contents.append('// See the License for the specific language governing permissions and')
    contents.append('// limitations under the License.')

    contents.append("#ifndef DIAGRAM_SERVER_CT_LVTPLG_BASICPLUGINHANDLERS_H")
    contents.append("#define DIAGRAM_SERVER_CT_LVTPLG_BASICPLUGINHANDLERS_H")
    contents.append('')
    contents.append(f'#include <ct_lvtplg_plugindatatypes.h>')
    contents.append(f'')
    contents.append('#include <any>')
    contents.append('#include <functional>')
    contents.append('#include <optional>')
    contents.append('#include <string>')
    contents.append('#include <tuple>')
    contents.append('#include <vector>')
    contents.append('')

    for handler_info in HANDLERS:
        contents.append(f'struct {handler_info.name};')
    contents.append('')

    for handler_info in HANDLERS:
        contents.append(f'struct {handler_info.name} {{')
        for f in handler_info.functions:
            params = ','.join([f'{p.type} {p.name}' for p in f.params])
            contents.append(f'// {f.docs}')
            contents.append(f'std::function<{f.return_type}({params})> const {f.name};')
            contents.append(f'')
        contents.append(f'}};')
        contents.append(f'')
    contents.append('')

    contents.append("#endif")

    with open(output_path + "/" + filename, 'w') as f:
        f.write('\n'.join(contents))
