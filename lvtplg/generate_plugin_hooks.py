import sys
from hooks import HOOKS


if __name__ == "__main__":
    # Note: Please don't use JINJA for code generation, since some users don't have it installed.
    output_path = sys.argv[1]
    filename = 'basicpluginhooks.h'
    fwd_declaration_types = list(set(hook.handler for hook in HOOKS))

    contents = []
    contents.append("// This file is automatically generated. Do not modify it directly - Use the generator file instead.")
    contents.append('')
    contents.append('')

    contents.append(f"// ct_lvtplg_{filename}.h                                         -*-C++-*-")
    contents.append('')
    contents.append('// Copyright 2023 Codethink Ltd <codethink@codethink.co.uk>')
    contents.append('// SPDX-License-Identifier: Apache-2.0')
    contents.append('//')
    contents.append('// Licensed under the Apache License, Version 2.0 (the "License");')
    contents.append('// you may not use this file except in compliance with the License.')
    contents.append('// You may obtain a copy of the License at')
    contents.append('//')
    contents.append('//     http://www.apache.org/licenses/LICENSE-2.0')
    contents.append('//')
    contents.append('// Unless required by applicable law or agreed to in writing, software')
    contents.append('// distributed under the License is distributed on an "AS IS" BASIS,')
    contents.append('// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.')
    contents.append('// See the License for the specific language governing permissions and')
    contents.append('// limitations under the License.')

    contents.append("#ifndef DIAGRAM_SERVER_CT_LVTPLG_BASICPLUGINHOOKS_H")
    contents.append("#define DIAGRAM_SERVER_CT_LVTPLG_BASICPLUGINHOOKS_H")
    contents.append('')
    contents.append('#ifdef _WIN32')
    contents.append('#define _EXPORT_AS_C extern "C" __declspec(dllexport)')
    contents.append('#else')
    contents.append('#define _EXPORT_AS_C extern "C"')
    contents.append('#endif')
    contents.append('')

    contents.append('// Forward declarations of data types')
    for fwd_decl_type in fwd_declaration_types:
        contents.append(f'struct {fwd_decl_type};')
    contents.append('')

    contents.append('// Available plugin hooks')
    for hook_info in HOOKS:
        contents.append(f'// {hook_info.docs}')
        contents.append(f'typedef {hook_info.return_type} (*hook{hook_info.name}_f)({hook_info.handler} *);')
        contents.append(f'_EXPORT_AS_C {hook_info.return_type} hook{hook_info.name}({hook_info.handler} *);')
        contents.append('')
    contents.append('')

    contents.append('#undef _EXPORT_AS_C')
    contents.append('')

    contents.append("#endif")

    plugin_hook_header = output_path + "/ct_lvtplg_" + filename
    with open(plugin_hook_header, 'w') as f:
        f.write('\n'.join(contents))
