import sys
from handlers import HANDLERS


if __name__ == "__main__":
    # Note: Please don't use JINJA for code generation, since some users don't have it installed.
    output_path = sys.argv[1]
    filename = 'ct_lvtplg_handlerbindings.inc.cpp'

    contents = []
    contents.append("// This file is automatically generated. Do not modify it directly - Use the generator file instead.")
    contents.append(f'')
    contents.append(f'void exportHandlers(auto& m)')
    contents.append(f'{{')
    contents.append(f'using namespace Codethink::lvtplg;')
    contents.append(f'')

    for handler in HANDLERS:
        contents.append(f'{{')
        contents.append(f'using T = {handler.name};')
        contents.append(f'py::class_<T>(m, "{handler.name}")')
        for f in handler.functions:
            if f.bind_f == 'no_bindings':
                continue

            if f.bind_f == 'as_lambda':
                params = ','.join(['T const& self'] + [f'{p.type} {p.name}' for p in f.params])
                args = ','.join([f'{p.name}' for p in f.params])
                bind_f = f'[]({params}) {{ return self.{f.name}({args}); }}'
            else:
                bind_f = f'&{f.bind_f}'
            if f.params:
                pyargs_names = ','.join([f'py::arg("{p.name}")' for p in f.params])
                pyargs_names = ', ' + pyargs_names
            else:
                pyargs_names = ''
            contents.append(f'    .def("{f.name}", {bind_f}{pyargs_names})')
        contents.append(f';')
        contents.append(f'}}')

    contents.append(f'}}')
    contents.append('')

    with open(output_path + "/" + filename, 'w') as f:
        f.write('\n'.join(contents))
