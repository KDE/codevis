// clang-format off
// DO NOT EDIT THIS FILE
// This file was automatically generated by configuration-parser
// There will be a .conf file somewhere which was used to generate this file
// See https://github.com/tcanabrava/configuration-parser

#include "preferences.h"
#include <QSettings>

Debug::Debug(QObject *parent) : QObject(parent),
	_enableSceneContextMenu(false),
	_enableDebugOutput(false),
	_storeDebugOutput(false)
{
}

bool Debug::enableSceneContextMenu() const
{
	return _enableSceneContextMenu;
}

bool Debug::enableDebugOutput() const
{
	return _enableDebugOutput;
}

bool Debug::storeDebugOutput() const
{
	return _storeDebugOutput;
}

void Debug::setEnableSceneContextMenu(bool value)
{
	if (_enableSceneContextMenu==value) {
		return;
	}
	if (enableSceneContextMenuRule && !enableSceneContextMenuRule(value)) {
		return;
	}
	_enableSceneContextMenu = value;
	Q_EMIT enableSceneContextMenuChanged(value);
}

void Debug::setEnableDebugOutput(bool value)
{
	if (_enableDebugOutput==value) {
		return;
	}
	if (enableDebugOutputRule && !enableDebugOutputRule(value)) {
		return;
	}
	_enableDebugOutput = value;
	Q_EMIT enableDebugOutputChanged(value);
}

void Debug::setStoreDebugOutput(bool value)
{
	if (_storeDebugOutput==value) {
		return;
	}
	if (storeDebugOutputRule && !storeDebugOutputRule(value)) {
		return;
	}
	_storeDebugOutput = value;
	Q_EMIT storeDebugOutputChanged(value);
}

void Debug::setEnableSceneContextMenuRule(std::function<bool(bool)> rule)
{
	enableSceneContextMenuRule = rule;
}

void Debug::setEnableDebugOutputRule(std::function<bool(bool)> rule)
{
	enableDebugOutputRule = rule;
}

void Debug::setStoreDebugOutputRule(std::function<bool(bool)> rule)
{
	storeDebugOutputRule = rule;
}

bool Debug::enableSceneContextMenuDefault() const
{
	return false;
}
bool Debug::enableDebugOutputDefault() const
{
	return false;
}
bool Debug::storeDebugOutputDefault() const
{
	return false;
}
void Debug::loadDefaults()
{
	setEnableSceneContextMenu(false);
	setEnableDebugOutput(false);
	setStoreDebugOutput(false);
}
Document::Document(QObject *parent) : QObject(parent),
	_lastDocument(""),
	_useDependencyTypes(true),
	_useLakosianRules(true),
	_autoSaveBackupIntervalMsecs(1000)
{
}

QString Document::lastDocument() const
{
	return _lastDocument;
}

bool Document::useDependencyTypes() const
{
	return _useDependencyTypes;
}

bool Document::useLakosianRules() const
{
	return _useLakosianRules;
}

int Document::autoSaveBackupIntervalMsecs() const
{
	return _autoSaveBackupIntervalMsecs;
}

void Document::setLastDocument(const QString& value)
{
	if (_lastDocument==value) {
		return;
	}
	if (lastDocumentRule && !lastDocumentRule(value)) {
		return;
	}
	_lastDocument = value;
	Q_EMIT lastDocumentChanged(value);
}

void Document::setUseDependencyTypes(bool value)
{
	if (_useDependencyTypes==value) {
		return;
	}
	if (useDependencyTypesRule && !useDependencyTypesRule(value)) {
		return;
	}
	_useDependencyTypes = value;
	Q_EMIT useDependencyTypesChanged(value);
}

void Document::setUseLakosianRules(bool value)
{
	if (_useLakosianRules==value) {
		return;
	}
	if (useLakosianRulesRule && !useLakosianRulesRule(value)) {
		return;
	}
	_useLakosianRules = value;
	Q_EMIT useLakosianRulesChanged(value);
}

void Document::setAutoSaveBackupIntervalMsecs(int value)
{
	if (_autoSaveBackupIntervalMsecs==value) {
		return;
	}
	if (autoSaveBackupIntervalMsecsRule && !autoSaveBackupIntervalMsecsRule(value)) {
		return;
	}
	_autoSaveBackupIntervalMsecs = value;
	Q_EMIT autoSaveBackupIntervalMsecsChanged(value);
}

void Document::setLastDocumentRule(std::function<bool(QString)> rule)
{
	lastDocumentRule = rule;
}

void Document::setUseDependencyTypesRule(std::function<bool(bool)> rule)
{
	useDependencyTypesRule = rule;
}

void Document::setUseLakosianRulesRule(std::function<bool(bool)> rule)
{
	useLakosianRulesRule = rule;
}

void Document::setAutoSaveBackupIntervalMsecsRule(std::function<bool(int)> rule)
{
	autoSaveBackupIntervalMsecsRule = rule;
}

QString Document::lastDocumentDefault() const
{
	return "";
}
bool Document::useDependencyTypesDefault() const
{
	return true;
}
bool Document::useLakosianRulesDefault() const
{
	return true;
}
int Document::autoSaveBackupIntervalMsecsDefault() const
{
	return 1000;
}
void Document::loadDefaults()
{
	setLastDocument("");
	setUseDependencyTypes(true);
	setUseLakosianRules(true);
	setAutoSaveBackupIntervalMsecs(1000);
}
GraphTab::GraphTab(QObject *parent) : QObject(parent),
	_showMinimap(false),
	_showLegend(false),
	_classLimit(2),
	_relationLimit(20),
	_zoomLevel(100),
	_updateIntervalMsec(500)
{
}

bool GraphTab::showMinimap() const
{
	return _showMinimap;
}

bool GraphTab::showLegend() const
{
	return _showLegend;
}

int GraphTab::classLimit() const
{
	return _classLimit;
}

int GraphTab::relationLimit() const
{
	return _relationLimit;
}

int GraphTab::zoomLevel() const
{
	return _zoomLevel;
}

int GraphTab::updateIntervalMsec() const
{
	return _updateIntervalMsec;
}

void GraphTab::setShowMinimap(bool value)
{
	if (_showMinimap==value) {
		return;
	}
	if (showMinimapRule && !showMinimapRule(value)) {
		return;
	}
	_showMinimap = value;
	Q_EMIT showMinimapChanged(value);
}

void GraphTab::setShowLegend(bool value)
{
	if (_showLegend==value) {
		return;
	}
	if (showLegendRule && !showLegendRule(value)) {
		return;
	}
	_showLegend = value;
	Q_EMIT showLegendChanged(value);
}

void GraphTab::setClassLimit(int value)
{
	if (_classLimit==value) {
		return;
	}
	if (classLimitRule && !classLimitRule(value)) {
		return;
	}
	_classLimit = value;
	Q_EMIT classLimitChanged(value);
}

void GraphTab::setRelationLimit(int value)
{
	if (_relationLimit==value) {
		return;
	}
	if (relationLimitRule && !relationLimitRule(value)) {
		return;
	}
	_relationLimit = value;
	Q_EMIT relationLimitChanged(value);
}

void GraphTab::setZoomLevel(int value)
{
	if (_zoomLevel==value) {
		return;
	}
	if (zoomLevelRule && !zoomLevelRule(value)) {
		return;
	}
	_zoomLevel = value;
	Q_EMIT zoomLevelChanged(value);
}

void GraphTab::setUpdateIntervalMsec(int value)
{
	if (_updateIntervalMsec==value) {
		return;
	}
	if (updateIntervalMsecRule && !updateIntervalMsecRule(value)) {
		return;
	}
	_updateIntervalMsec = value;
	Q_EMIT updateIntervalMsecChanged(value);
}

void GraphTab::setShowMinimapRule(std::function<bool(bool)> rule)
{
	showMinimapRule = rule;
}

void GraphTab::setShowLegendRule(std::function<bool(bool)> rule)
{
	showLegendRule = rule;
}

void GraphTab::setClassLimitRule(std::function<bool(int)> rule)
{
	classLimitRule = rule;
}

void GraphTab::setRelationLimitRule(std::function<bool(int)> rule)
{
	relationLimitRule = rule;
}

void GraphTab::setZoomLevelRule(std::function<bool(int)> rule)
{
	zoomLevelRule = rule;
}

void GraphTab::setUpdateIntervalMsecRule(std::function<bool(int)> rule)
{
	updateIntervalMsecRule = rule;
}

bool GraphTab::showMinimapDefault() const
{
	return false;
}
bool GraphTab::showLegendDefault() const
{
	return false;
}
int GraphTab::classLimitDefault() const
{
	return 2;
}
int GraphTab::relationLimitDefault() const
{
	return 20;
}
int GraphTab::zoomLevelDefault() const
{
	return 100;
}
int GraphTab::updateIntervalMsecDefault() const
{
	return 500;
}
void GraphTab::loadDefaults()
{
	setShowMinimap(false);
	setShowLegend(false);
	setClassLimit(2);
	setRelationLimit(20);
	setZoomLevel(100);
	setUpdateIntervalMsec(500);
}
GraphWindow::GraphWindow(QObject *parent) : QObject(parent),
	_dragModifier(Qt::SHIFT),
	_panModifier(Qt::ALT),
	_zoomModifier(Qt::CTRL),
	_minimapSize(10),
	_colorBlindMode(false),
	_useColorBlindFill(false),
	_backgroundColor(QColor(Qt::white)),
	_entityBackgroundColor(QColor(204, 229, 255)),
	_selectedEntityBackgroundColor(QColor(204, 229, 255)),
	_enableGradientOnMainNode(true),
	_edgeColor(QColor(Qt::black)),
	_highlightEdgeColor(QColor(Qt::red)),
	_lakosEntityNamePos(Qt::BottomLeftCorner),
	_showRedundantEdgesDefault(false),
	_hidePackagePrefixOnComponents(false),
	_invertHorizontalLevelizationLayout(false),
	_invertVerticalLevelizationLayout(false),
	_showLevelNumbers(true)
{
}

int GraphWindow::dragModifier() const
{
	return _dragModifier;
}

int GraphWindow::panModifier() const
{
	return _panModifier;
}

int GraphWindow::zoomModifier() const
{
	return _zoomModifier;
}

int GraphWindow::minimapSize() const
{
	return _minimapSize;
}

bool GraphWindow::colorBlindMode() const
{
	return _colorBlindMode;
}

bool GraphWindow::useColorBlindFill() const
{
	return _useColorBlindFill;
}

QColor GraphWindow::backgroundColor() const
{
	return _backgroundColor;
}

QColor GraphWindow::entityBackgroundColor() const
{
	return _entityBackgroundColor;
}

QColor GraphWindow::selectedEntityBackgroundColor() const
{
	return _selectedEntityBackgroundColor;
}

bool GraphWindow::enableGradientOnMainNode() const
{
	return _enableGradientOnMainNode;
}

QColor GraphWindow::edgeColor() const
{
	return _edgeColor;
}

QColor GraphWindow::highlightEdgeColor() const
{
	return _highlightEdgeColor;
}

Qt::Corner GraphWindow::lakosEntityNamePos() const
{
	return _lakosEntityNamePos;
}

bool GraphWindow::showRedundantEdgesDefault() const
{
	return _showRedundantEdgesDefault;
}

bool GraphWindow::hidePackagePrefixOnComponents() const
{
	return _hidePackagePrefixOnComponents;
}

bool GraphWindow::invertHorizontalLevelizationLayout() const
{
	return _invertHorizontalLevelizationLayout;
}

bool GraphWindow::invertVerticalLevelizationLayout() const
{
	return _invertVerticalLevelizationLayout;
}

bool GraphWindow::showLevelNumbers() const
{
	return _showLevelNumbers;
}

void GraphWindow::setDragModifier(int value)
{
	if (_dragModifier==value) {
		return;
	}
	if (dragModifierRule && !dragModifierRule(value)) {
		return;
	}
	_dragModifier = value;
	Q_EMIT dragModifierChanged(value);
}

void GraphWindow::setPanModifier(int value)
{
	if (_panModifier==value) {
		return;
	}
	if (panModifierRule && !panModifierRule(value)) {
		return;
	}
	_panModifier = value;
	Q_EMIT panModifierChanged(value);
}

void GraphWindow::setZoomModifier(int value)
{
	if (_zoomModifier==value) {
		return;
	}
	if (zoomModifierRule && !zoomModifierRule(value)) {
		return;
	}
	_zoomModifier = value;
	Q_EMIT zoomModifierChanged(value);
}

void GraphWindow::setMinimapSize(int value)
{
	if (_minimapSize==value) {
		return;
	}
	if (minimapSizeRule && !minimapSizeRule(value)) {
		return;
	}
	_minimapSize = value;
	Q_EMIT minimapSizeChanged(value);
}

void GraphWindow::setColorBlindMode(bool value)
{
	if (_colorBlindMode==value) {
		return;
	}
	if (colorBlindModeRule && !colorBlindModeRule(value)) {
		return;
	}
	_colorBlindMode = value;
	Q_EMIT colorBlindModeChanged(value);
}

void GraphWindow::setUseColorBlindFill(bool value)
{
	if (_useColorBlindFill==value) {
		return;
	}
	if (useColorBlindFillRule && !useColorBlindFillRule(value)) {
		return;
	}
	_useColorBlindFill = value;
	Q_EMIT useColorBlindFillChanged(value);
}

void GraphWindow::setBackgroundColor(const QColor& value)
{
	if (_backgroundColor==value) {
		return;
	}
	if (backgroundColorRule && !backgroundColorRule(value)) {
		return;
	}
	_backgroundColor = value;
	Q_EMIT backgroundColorChanged(value);
}

void GraphWindow::setEntityBackgroundColor(const QColor& value)
{
	if (_entityBackgroundColor==value) {
		return;
	}
	if (entityBackgroundColorRule && !entityBackgroundColorRule(value)) {
		return;
	}
	_entityBackgroundColor = value;
	Q_EMIT entityBackgroundColorChanged(value);
}

void GraphWindow::setSelectedEntityBackgroundColor(const QColor& value)
{
	if (_selectedEntityBackgroundColor==value) {
		return;
	}
	if (selectedEntityBackgroundColorRule && !selectedEntityBackgroundColorRule(value)) {
		return;
	}
	_selectedEntityBackgroundColor = value;
	Q_EMIT selectedEntityBackgroundColorChanged(value);
}

void GraphWindow::setEnableGradientOnMainNode(bool value)
{
	if (_enableGradientOnMainNode==value) {
		return;
	}
	if (enableGradientOnMainNodeRule && !enableGradientOnMainNodeRule(value)) {
		return;
	}
	_enableGradientOnMainNode = value;
	Q_EMIT enableGradientOnMainNodeChanged(value);
}

void GraphWindow::setEdgeColor(const QColor& value)
{
	if (_edgeColor==value) {
		return;
	}
	if (edgeColorRule && !edgeColorRule(value)) {
		return;
	}
	_edgeColor = value;
	Q_EMIT edgeColorChanged(value);
}

void GraphWindow::setHighlightEdgeColor(const QColor& value)
{
	if (_highlightEdgeColor==value) {
		return;
	}
	if (highlightEdgeColorRule && !highlightEdgeColorRule(value)) {
		return;
	}
	_highlightEdgeColor = value;
	Q_EMIT highlightEdgeColorChanged(value);
}

void GraphWindow::setLakosEntityNamePos(const Qt::Corner& value)
{
	if (_lakosEntityNamePos==value) {
		return;
	}
	if (lakosEntityNamePosRule && !lakosEntityNamePosRule(value)) {
		return;
	}
	_lakosEntityNamePos = value;
	Q_EMIT lakosEntityNamePosChanged(value);
}

void GraphWindow::setShowRedundantEdgesDefault(bool value)
{
	if (_showRedundantEdgesDefault==value) {
		return;
	}
	if (showRedundantEdgesDefaultRule && !showRedundantEdgesDefaultRule(value)) {
		return;
	}
	_showRedundantEdgesDefault = value;
	Q_EMIT showRedundantEdgesDefaultChanged(value);
}

void GraphWindow::setHidePackagePrefixOnComponents(bool value)
{
	if (_hidePackagePrefixOnComponents==value) {
		return;
	}
	if (hidePackagePrefixOnComponentsRule && !hidePackagePrefixOnComponentsRule(value)) {
		return;
	}
	_hidePackagePrefixOnComponents = value;
	Q_EMIT hidePackagePrefixOnComponentsChanged(value);
}

void GraphWindow::setInvertHorizontalLevelizationLayout(bool value)
{
	if (_invertHorizontalLevelizationLayout==value) {
		return;
	}
	if (invertHorizontalLevelizationLayoutRule && !invertHorizontalLevelizationLayoutRule(value)) {
		return;
	}
	_invertHorizontalLevelizationLayout = value;
	Q_EMIT invertHorizontalLevelizationLayoutChanged(value);
}

void GraphWindow::setInvertVerticalLevelizationLayout(bool value)
{
	if (_invertVerticalLevelizationLayout==value) {
		return;
	}
	if (invertVerticalLevelizationLayoutRule && !invertVerticalLevelizationLayoutRule(value)) {
		return;
	}
	_invertVerticalLevelizationLayout = value;
	Q_EMIT invertVerticalLevelizationLayoutChanged(value);
}

void GraphWindow::setShowLevelNumbers(bool value)
{
	if (_showLevelNumbers==value) {
		return;
	}
	if (showLevelNumbersRule && !showLevelNumbersRule(value)) {
		return;
	}
	_showLevelNumbers = value;
	Q_EMIT showLevelNumbersChanged(value);
}

void GraphWindow::setDragModifierRule(std::function<bool(int)> rule)
{
	dragModifierRule = rule;
}

void GraphWindow::setPanModifierRule(std::function<bool(int)> rule)
{
	panModifierRule = rule;
}

void GraphWindow::setZoomModifierRule(std::function<bool(int)> rule)
{
	zoomModifierRule = rule;
}

void GraphWindow::setMinimapSizeRule(std::function<bool(int)> rule)
{
	minimapSizeRule = rule;
}

void GraphWindow::setColorBlindModeRule(std::function<bool(bool)> rule)
{
	colorBlindModeRule = rule;
}

void GraphWindow::setUseColorBlindFillRule(std::function<bool(bool)> rule)
{
	useColorBlindFillRule = rule;
}

void GraphWindow::setBackgroundColorRule(std::function<bool(QColor)> rule)
{
	backgroundColorRule = rule;
}

void GraphWindow::setEntityBackgroundColorRule(std::function<bool(QColor)> rule)
{
	entityBackgroundColorRule = rule;
}

void GraphWindow::setSelectedEntityBackgroundColorRule(std::function<bool(QColor)> rule)
{
	selectedEntityBackgroundColorRule = rule;
}

void GraphWindow::setEnableGradientOnMainNodeRule(std::function<bool(bool)> rule)
{
	enableGradientOnMainNodeRule = rule;
}

void GraphWindow::setEdgeColorRule(std::function<bool(QColor)> rule)
{
	edgeColorRule = rule;
}

void GraphWindow::setHighlightEdgeColorRule(std::function<bool(QColor)> rule)
{
	highlightEdgeColorRule = rule;
}

void GraphWindow::setLakosEntityNamePosRule(std::function<bool(Qt::Corner)> rule)
{
	lakosEntityNamePosRule = rule;
}

void GraphWindow::setShowRedundantEdgesDefaultRule(std::function<bool(bool)> rule)
{
	showRedundantEdgesDefaultRule = rule;
}

void GraphWindow::setHidePackagePrefixOnComponentsRule(std::function<bool(bool)> rule)
{
	hidePackagePrefixOnComponentsRule = rule;
}

void GraphWindow::setInvertHorizontalLevelizationLayoutRule(std::function<bool(bool)> rule)
{
	invertHorizontalLevelizationLayoutRule = rule;
}

void GraphWindow::setInvertVerticalLevelizationLayoutRule(std::function<bool(bool)> rule)
{
	invertVerticalLevelizationLayoutRule = rule;
}

void GraphWindow::setShowLevelNumbersRule(std::function<bool(bool)> rule)
{
	showLevelNumbersRule = rule;
}

int GraphWindow::dragModifierDefault() const
{
	return Qt::SHIFT;
}
int GraphWindow::panModifierDefault() const
{
	return Qt::ALT;
}
int GraphWindow::zoomModifierDefault() const
{
	return Qt::CTRL;
}
int GraphWindow::minimapSizeDefault() const
{
	return 10;
}
bool GraphWindow::colorBlindModeDefault() const
{
	return false;
}
bool GraphWindow::useColorBlindFillDefault() const
{
	return false;
}
QColor GraphWindow::backgroundColorDefault() const
{
	return QColor(Qt::white);
}
QColor GraphWindow::entityBackgroundColorDefault() const
{
	return QColor(204, 229, 255);
}
QColor GraphWindow::selectedEntityBackgroundColorDefault() const
{
	return QColor(204, 229, 255);
}
bool GraphWindow::enableGradientOnMainNodeDefault() const
{
	return true;
}
QColor GraphWindow::edgeColorDefault() const
{
	return QColor(Qt::black);
}
QColor GraphWindow::highlightEdgeColorDefault() const
{
	return QColor(Qt::red);
}
Qt::Corner GraphWindow::lakosEntityNamePosDefault() const
{
	return Qt::BottomLeftCorner;
}
bool GraphWindow::showRedundantEdgesDefaultDefault() const
{
	return false;
}
bool GraphWindow::hidePackagePrefixOnComponentsDefault() const
{
	return false;
}
bool GraphWindow::invertHorizontalLevelizationLayoutDefault() const
{
	return false;
}
bool GraphWindow::invertVerticalLevelizationLayoutDefault() const
{
	return false;
}
bool GraphWindow::showLevelNumbersDefault() const
{
	return true;
}
void GraphWindow::loadDefaults()
{
	setDragModifier(Qt::SHIFT);
	setPanModifier(Qt::ALT);
	setZoomModifier(Qt::CTRL);
	setMinimapSize(10);
	setColorBlindMode(false);
	setUseColorBlindFill(false);
	setBackgroundColor(QColor(Qt::white));
	setEntityBackgroundColor(QColor(204, 229, 255));
	setSelectedEntityBackgroundColor(QColor(204, 229, 255));
	setEnableGradientOnMainNode(true);
	setEdgeColor(QColor(Qt::black));
	setHighlightEdgeColor(QColor(Qt::red));
	setLakosEntityNamePos(Qt::BottomLeftCorner);
	setShowRedundantEdgesDefault(false);
	setHidePackagePrefixOnComponents(false);
	setInvertHorizontalLevelizationLayout(false);
	setInvertVerticalLevelizationLayout(false);
	setShowLevelNumbers(true);
}
Fonts::Fonts(QObject *parent) : QObject(parent),
	_pkgGroupFont(qApp->font()),
	_pkgFont(qApp->font()),
	_componentFont(qApp->font()),
	_classFont(qApp->font()),
	_structFont(qApp->font()),
	_enumFont(qApp->font())
{
}

QFont Fonts::pkgGroupFont() const
{
	return _pkgGroupFont;
}

QFont Fonts::pkgFont() const
{
	return _pkgFont;
}

QFont Fonts::componentFont() const
{
	return _componentFont;
}

QFont Fonts::classFont() const
{
	return _classFont;
}

QFont Fonts::structFont() const
{
	return _structFont;
}

QFont Fonts::enumFont() const
{
	return _enumFont;
}

void Fonts::setPkgGroupFont(const QFont& value)
{
	if (_pkgGroupFont==value) {
		return;
	}
	if (pkgGroupFontRule && !pkgGroupFontRule(value)) {
		return;
	}
	_pkgGroupFont = value;
	Q_EMIT pkgGroupFontChanged(value);
}

void Fonts::setPkgFont(const QFont& value)
{
	if (_pkgFont==value) {
		return;
	}
	if (pkgFontRule && !pkgFontRule(value)) {
		return;
	}
	_pkgFont = value;
	Q_EMIT pkgFontChanged(value);
}

void Fonts::setComponentFont(const QFont& value)
{
	if (_componentFont==value) {
		return;
	}
	if (componentFontRule && !componentFontRule(value)) {
		return;
	}
	_componentFont = value;
	Q_EMIT componentFontChanged(value);
}

void Fonts::setClassFont(const QFont& value)
{
	if (_classFont==value) {
		return;
	}
	if (classFontRule && !classFontRule(value)) {
		return;
	}
	_classFont = value;
	Q_EMIT classFontChanged(value);
}

void Fonts::setStructFont(const QFont& value)
{
	if (_structFont==value) {
		return;
	}
	if (structFontRule && !structFontRule(value)) {
		return;
	}
	_structFont = value;
	Q_EMIT structFontChanged(value);
}

void Fonts::setEnumFont(const QFont& value)
{
	if (_enumFont==value) {
		return;
	}
	if (enumFontRule && !enumFontRule(value)) {
		return;
	}
	_enumFont = value;
	Q_EMIT enumFontChanged(value);
}

void Fonts::setPkgGroupFontRule(std::function<bool(QFont)> rule)
{
	pkgGroupFontRule = rule;
}

void Fonts::setPkgFontRule(std::function<bool(QFont)> rule)
{
	pkgFontRule = rule;
}

void Fonts::setComponentFontRule(std::function<bool(QFont)> rule)
{
	componentFontRule = rule;
}

void Fonts::setClassFontRule(std::function<bool(QFont)> rule)
{
	classFontRule = rule;
}

void Fonts::setStructFontRule(std::function<bool(QFont)> rule)
{
	structFontRule = rule;
}

void Fonts::setEnumFontRule(std::function<bool(QFont)> rule)
{
	enumFontRule = rule;
}

QFont Fonts::pkgGroupFontDefault() const
{
	return qApp->font();
}
QFont Fonts::pkgFontDefault() const
{
	return qApp->font();
}
QFont Fonts::componentFontDefault() const
{
	return qApp->font();
}
QFont Fonts::classFontDefault() const
{
	return qApp->font();
}
QFont Fonts::structFontDefault() const
{
	return qApp->font();
}
QFont Fonts::enumFontDefault() const
{
	return qApp->font();
}
void Fonts::loadDefaults()
{
	setPkgGroupFont(qApp->font());
	setPkgFont(qApp->font());
	setComponentFont(qApp->font());
	setClassFont(qApp->font());
	setStructFont(qApp->font());
	setEnumFont(qApp->font());
}
Tools::Tools(QObject *parent) : QObject(parent),
	_showText(true)
{
}

bool Tools::showText() const
{
	return _showText;
}

void Tools::setShowText(bool value)
{
	if (_showText==value) {
		return;
	}
	if (showTextRule && !showTextRule(value)) {
		return;
	}
	_showText = value;
	Q_EMIT showTextChanged(value);
}

void Tools::setShowTextRule(std::function<bool(bool)> rule)
{
	showTextRule = rule;
}

bool Tools::showTextDefault() const
{
	return true;
}
void Tools::loadDefaults()
{
	setShowText(true);
}
Window::Window(QObject *parent) : QObject(parent),
	_graphTab(new GraphTab(this)),
	_graphWindow(new GraphWindow(this)),
	_fonts(new Fonts(this)),
	_tools(new Tools(this))
{
}

GraphTab* Window::graphTab() const
{
	return _graphTab;
}

GraphWindow* Window::graphWindow() const
{
	return _graphWindow;
}

Fonts* Window::fonts() const
{
	return _fonts;
}

Tools* Window::tools() const
{
	return _tools;
}

void Window::loadDefaults()
{
	_graphTab->loadDefaults();
	_graphWindow->loadDefaults();
	_fonts->loadDefaults();
	_tools->loadDefaults();
}
GraphLoadInfo::GraphLoadInfo(QObject *parent) : QObject(parent),
	_showIsARelation(true),
	_showUsesInTheImplementationRelation(true),
	_showUsesInTheInterfaceRelation(true),
	_showClients(true),
	_showProviders(false),
	_showExternalEdges(false)
{
}

bool GraphLoadInfo::showIsARelation() const
{
	return _showIsARelation;
}

bool GraphLoadInfo::showUsesInTheImplementationRelation() const
{
	return _showUsesInTheImplementationRelation;
}

bool GraphLoadInfo::showUsesInTheInterfaceRelation() const
{
	return _showUsesInTheInterfaceRelation;
}

bool GraphLoadInfo::showClients() const
{
	return _showClients;
}

bool GraphLoadInfo::showProviders() const
{
	return _showProviders;
}

bool GraphLoadInfo::showExternalEdges() const
{
	return _showExternalEdges;
}

void GraphLoadInfo::setShowIsARelation(bool value)
{
	if (_showIsARelation==value) {
		return;
	}
	if (showIsARelationRule && !showIsARelationRule(value)) {
		return;
	}
	_showIsARelation = value;
	Q_EMIT showIsARelationChanged(value);
}

void GraphLoadInfo::setShowUsesInTheImplementationRelation(bool value)
{
	if (_showUsesInTheImplementationRelation==value) {
		return;
	}
	if (showUsesInTheImplementationRelationRule && !showUsesInTheImplementationRelationRule(value)) {
		return;
	}
	_showUsesInTheImplementationRelation = value;
	Q_EMIT showUsesInTheImplementationRelationChanged(value);
}

void GraphLoadInfo::setShowUsesInTheInterfaceRelation(bool value)
{
	if (_showUsesInTheInterfaceRelation==value) {
		return;
	}
	if (showUsesInTheInterfaceRelationRule && !showUsesInTheInterfaceRelationRule(value)) {
		return;
	}
	_showUsesInTheInterfaceRelation = value;
	Q_EMIT showUsesInTheInterfaceRelationChanged(value);
}

void GraphLoadInfo::setShowClients(bool value)
{
	if (_showClients==value) {
		return;
	}
	if (showClientsRule && !showClientsRule(value)) {
		return;
	}
	_showClients = value;
	Q_EMIT showClientsChanged(value);
}

void GraphLoadInfo::setShowProviders(bool value)
{
	if (_showProviders==value) {
		return;
	}
	if (showProvidersRule && !showProvidersRule(value)) {
		return;
	}
	_showProviders = value;
	Q_EMIT showProvidersChanged(value);
}

void GraphLoadInfo::setShowExternalEdges(bool value)
{
	if (_showExternalEdges==value) {
		return;
	}
	if (showExternalEdgesRule && !showExternalEdgesRule(value)) {
		return;
	}
	_showExternalEdges = value;
	Q_EMIT showExternalEdgesChanged(value);
}

void GraphLoadInfo::setShowIsARelationRule(std::function<bool(bool)> rule)
{
	showIsARelationRule = rule;
}

void GraphLoadInfo::setShowUsesInTheImplementationRelationRule(std::function<bool(bool)> rule)
{
	showUsesInTheImplementationRelationRule = rule;
}

void GraphLoadInfo::setShowUsesInTheInterfaceRelationRule(std::function<bool(bool)> rule)
{
	showUsesInTheInterfaceRelationRule = rule;
}

void GraphLoadInfo::setShowClientsRule(std::function<bool(bool)> rule)
{
	showClientsRule = rule;
}

void GraphLoadInfo::setShowProvidersRule(std::function<bool(bool)> rule)
{
	showProvidersRule = rule;
}

void GraphLoadInfo::setShowExternalEdgesRule(std::function<bool(bool)> rule)
{
	showExternalEdgesRule = rule;
}

bool GraphLoadInfo::showIsARelationDefault() const
{
	return true;
}
bool GraphLoadInfo::showUsesInTheImplementationRelationDefault() const
{
	return true;
}
bool GraphLoadInfo::showUsesInTheInterfaceRelationDefault() const
{
	return true;
}
bool GraphLoadInfo::showClientsDefault() const
{
	return true;
}
bool GraphLoadInfo::showProvidersDefault() const
{
	return false;
}
bool GraphLoadInfo::showExternalEdgesDefault() const
{
	return false;
}
void GraphLoadInfo::loadDefaults()
{
	setShowIsARelation(true);
	setShowUsesInTheImplementationRelation(true);
	setShowUsesInTheInterfaceRelation(true);
	setShowClients(true);
	setShowProviders(false);
	setShowExternalEdges(false);
}
CodeExtractor::CodeExtractor(QObject *parent) : QObject(parent),
	_lastConfigureJson(""),
	_lastSourceFolder(""),
	_lastIgnorePattern("*.t.cpp,*.m.cpp,moc_*.cpp,*standalone*,*thirdparty*")
{
}

QString CodeExtractor::lastConfigureJson() const
{
	return _lastConfigureJson;
}

QString CodeExtractor::lastSourceFolder() const
{
	return _lastSourceFolder;
}

QString CodeExtractor::lastIgnorePattern() const
{
	return _lastIgnorePattern;
}

void CodeExtractor::setLastConfigureJson(const QString& value)
{
	if (_lastConfigureJson==value) {
		return;
	}
	if (lastConfigureJsonRule && !lastConfigureJsonRule(value)) {
		return;
	}
	_lastConfigureJson = value;
	Q_EMIT lastConfigureJsonChanged(value);
}

void CodeExtractor::setLastSourceFolder(const QString& value)
{
	if (_lastSourceFolder==value) {
		return;
	}
	if (lastSourceFolderRule && !lastSourceFolderRule(value)) {
		return;
	}
	_lastSourceFolder = value;
	Q_EMIT lastSourceFolderChanged(value);
}

void CodeExtractor::setLastIgnorePattern(const QString& value)
{
	if (_lastIgnorePattern==value) {
		return;
	}
	if (lastIgnorePatternRule && !lastIgnorePatternRule(value)) {
		return;
	}
	_lastIgnorePattern = value;
	Q_EMIT lastIgnorePatternChanged(value);
}

void CodeExtractor::setLastConfigureJsonRule(std::function<bool(QString)> rule)
{
	lastConfigureJsonRule = rule;
}

void CodeExtractor::setLastSourceFolderRule(std::function<bool(QString)> rule)
{
	lastSourceFolderRule = rule;
}

void CodeExtractor::setLastIgnorePatternRule(std::function<bool(QString)> rule)
{
	lastIgnorePatternRule = rule;
}

QString CodeExtractor::lastConfigureJsonDefault() const
{
	return "";
}
QString CodeExtractor::lastSourceFolderDefault() const
{
	return "";
}
QString CodeExtractor::lastIgnorePatternDefault() const
{
	return "*.t.cpp,*.m.cpp,moc_*.cpp,*standalone*,*thirdparty*";
}
void CodeExtractor::loadDefaults()
{
	setLastConfigureJson("");
	setLastSourceFolder("");
	setLastIgnorePattern("*.t.cpp,*.m.cpp,moc_*.cpp,*standalone*,*thirdparty*");
}
CodeGeneration::CodeGeneration(QObject *parent) : QObject(parent),
	_lastOutputDir("")
{
}

QString CodeGeneration::lastOutputDir() const
{
	return _lastOutputDir;
}

void CodeGeneration::setLastOutputDir(const QString& value)
{
	if (_lastOutputDir==value) {
		return;
	}
	if (lastOutputDirRule && !lastOutputDirRule(value)) {
		return;
	}
	_lastOutputDir = value;
	Q_EMIT lastOutputDirChanged(value);
}

void CodeGeneration::setLastOutputDirRule(std::function<bool(QString)> rule)
{
	lastOutputDirRule = rule;
}

QString CodeGeneration::lastOutputDirDefault() const
{
	return "";
}
void CodeGeneration::loadDefaults()
{
	setLastOutputDir("");
}
Preferences::Preferences(QObject *parent) : QObject(parent),
	_debug(new Debug(this)),
	_document(new Document(this)),
	_window(new Window(this)),
	_graphLoadInfo(new GraphLoadInfo(this)),
	_codeExtractor(new CodeExtractor(this)),
	_codeGeneration(new CodeGeneration(this))
{
	load();
}

Debug* Preferences::debug() const
{
	return _debug;
}

Document* Preferences::document() const
{
	return _document;
}

Window* Preferences::window() const
{
	return _window;
}

GraphLoadInfo* Preferences::graphLoadInfo() const
{
	return _graphLoadInfo;
}

CodeExtractor* Preferences::codeExtractor() const
{
	return _codeExtractor;
}

CodeGeneration* Preferences::codeGeneration() const
{
	return _codeGeneration;
}

void Preferences::loadDefaults()
{
	_debug->loadDefaults();
	_document->loadDefaults();
	_window->loadDefaults();
	_graphLoadInfo->loadDefaults();
	_codeExtractor->loadDefaults();
	_codeGeneration->loadDefaults();
}
void Preferences::sync()
{
	QSettings s;
	s.beginGroup("Debug");
		if (debug()->enableSceneContextMenu() == debug()->enableSceneContextMenuDefault()){
			s.remove("enable_scene_context_menu");
		} else {
			s.setValue("enable_scene_context_menu",debug()->enableSceneContextMenu());
		}
		if (debug()->enableDebugOutput() == debug()->enableDebugOutputDefault()){
			s.remove("enable_debug_output");
		} else {
			s.setValue("enable_debug_output",debug()->enableDebugOutput());
		}
		if (debug()->storeDebugOutput() == debug()->storeDebugOutputDefault()){
			s.remove("store_debug_output");
		} else {
			s.setValue("store_debug_output",debug()->storeDebugOutput());
		}
	s.endGroup();
	s.beginGroup("Document");
		if (document()->lastDocument() == document()->lastDocumentDefault()){
			s.remove("last_document");
		} else {
			s.setValue("last_document",document()->lastDocument());
		}
		if (document()->useDependencyTypes() == document()->useDependencyTypesDefault()){
			s.remove("use_dependency_types");
		} else {
			s.setValue("use_dependency_types",document()->useDependencyTypes());
		}
		if (document()->useLakosianRules() == document()->useLakosianRulesDefault()){
			s.remove("use_lakosian_rules");
		} else {
			s.setValue("use_lakosian_rules",document()->useLakosianRules());
		}
		if (document()->autoSaveBackupIntervalMsecs() == document()->autoSaveBackupIntervalMsecsDefault()){
			s.remove("auto_save_backup_interval_msecs");
		} else {
			s.setValue("auto_save_backup_interval_msecs",document()->autoSaveBackupIntervalMsecs());
		}
	s.endGroup();
	s.beginGroup("Window");
		s.beginGroup("GraphTab");
			if (window()->graphTab()->showMinimap() == window()->graphTab()->showMinimapDefault()){
				s.remove("show_minimap");
			} else {
				s.setValue("show_minimap",window()->graphTab()->showMinimap());
			}
			if (window()->graphTab()->showLegend() == window()->graphTab()->showLegendDefault()){
				s.remove("show_legend");
			} else {
				s.setValue("show_legend",window()->graphTab()->showLegend());
			}
			if (window()->graphTab()->classLimit() == window()->graphTab()->classLimitDefault()){
				s.remove("class_limit");
			} else {
				s.setValue("class_limit",window()->graphTab()->classLimit());
			}
			if (window()->graphTab()->relationLimit() == window()->graphTab()->relationLimitDefault()){
				s.remove("relation_limit");
			} else {
				s.setValue("relation_limit",window()->graphTab()->relationLimit());
			}
			if (window()->graphTab()->zoomLevel() == window()->graphTab()->zoomLevelDefault()){
				s.remove("zoom_level");
			} else {
				s.setValue("zoom_level",window()->graphTab()->zoomLevel());
			}
			if (window()->graphTab()->updateIntervalMsec() == window()->graphTab()->updateIntervalMsecDefault()){
				s.remove("update_interval_msec");
			} else {
				s.setValue("update_interval_msec",window()->graphTab()->updateIntervalMsec());
			}
		s.endGroup();
		s.beginGroup("GraphWindow");
			if (window()->graphWindow()->dragModifier() == window()->graphWindow()->dragModifierDefault()){
				s.remove("drag_modifier");
			} else {
				s.setValue("drag_modifier",window()->graphWindow()->dragModifier());
			}
			if (window()->graphWindow()->panModifier() == window()->graphWindow()->panModifierDefault()){
				s.remove("pan_modifier");
			} else {
				s.setValue("pan_modifier",window()->graphWindow()->panModifier());
			}
			if (window()->graphWindow()->zoomModifier() == window()->graphWindow()->zoomModifierDefault()){
				s.remove("zoom_modifier");
			} else {
				s.setValue("zoom_modifier",window()->graphWindow()->zoomModifier());
			}
			if (window()->graphWindow()->minimapSize() == window()->graphWindow()->minimapSizeDefault()){
				s.remove("minimap_size");
			} else {
				s.setValue("minimap_size",window()->graphWindow()->minimapSize());
			}
			if (window()->graphWindow()->colorBlindMode() == window()->graphWindow()->colorBlindModeDefault()){
				s.remove("color_blind_mode");
			} else {
				s.setValue("color_blind_mode",window()->graphWindow()->colorBlindMode());
			}
			if (window()->graphWindow()->useColorBlindFill() == window()->graphWindow()->useColorBlindFillDefault()){
				s.remove("use_color_blind_fill");
			} else {
				s.setValue("use_color_blind_fill",window()->graphWindow()->useColorBlindFill());
			}
			if (window()->graphWindow()->backgroundColor() == window()->graphWindow()->backgroundColorDefault()){
				s.remove("background_color");
			} else {
				s.setValue("background_color",window()->graphWindow()->backgroundColor());
			}
			if (window()->graphWindow()->entityBackgroundColor() == window()->graphWindow()->entityBackgroundColorDefault()){
				s.remove("entity_background_color");
			} else {
				s.setValue("entity_background_color",window()->graphWindow()->entityBackgroundColor());
			}
			if (window()->graphWindow()->selectedEntityBackgroundColor() == window()->graphWindow()->selectedEntityBackgroundColorDefault()){
				s.remove("selected_entity_background_color");
			} else {
				s.setValue("selected_entity_background_color",window()->graphWindow()->selectedEntityBackgroundColor());
			}
			if (window()->graphWindow()->enableGradientOnMainNode() == window()->graphWindow()->enableGradientOnMainNodeDefault()){
				s.remove("enable_gradient_on_main_node");
			} else {
				s.setValue("enable_gradient_on_main_node",window()->graphWindow()->enableGradientOnMainNode());
			}
			if (window()->graphWindow()->edgeColor() == window()->graphWindow()->edgeColorDefault()){
				s.remove("edge_color");
			} else {
				s.setValue("edge_color",window()->graphWindow()->edgeColor());
			}
			if (window()->graphWindow()->highlightEdgeColor() == window()->graphWindow()->highlightEdgeColorDefault()){
				s.remove("highlight_edge_color");
			} else {
				s.setValue("highlight_edge_color",window()->graphWindow()->highlightEdgeColor());
			}
			if (window()->graphWindow()->lakosEntityNamePos() == window()->graphWindow()->lakosEntityNamePosDefault()){
				s.remove("lakos_entity_name_pos");
			} else {
				s.setValue("lakos_entity_name_pos",window()->graphWindow()->lakosEntityNamePos());
			}
			if (window()->graphWindow()->showRedundantEdgesDefault() == window()->graphWindow()->showRedundantEdgesDefaultDefault()){
				s.remove("show_redundant_edges_default");
			} else {
				s.setValue("show_redundant_edges_default",window()->graphWindow()->showRedundantEdgesDefault());
			}
			if (window()->graphWindow()->hidePackagePrefixOnComponents() == window()->graphWindow()->hidePackagePrefixOnComponentsDefault()){
				s.remove("hide_package_prefix_on_components");
			} else {
				s.setValue("hide_package_prefix_on_components",window()->graphWindow()->hidePackagePrefixOnComponents());
			}
			if (window()->graphWindow()->invertHorizontalLevelizationLayout() == window()->graphWindow()->invertHorizontalLevelizationLayoutDefault()){
				s.remove("invert_horizontal_levelization_layout");
			} else {
				s.setValue("invert_horizontal_levelization_layout",window()->graphWindow()->invertHorizontalLevelizationLayout());
			}
			if (window()->graphWindow()->invertVerticalLevelizationLayout() == window()->graphWindow()->invertVerticalLevelizationLayoutDefault()){
				s.remove("invert_vertical_levelization_layout");
			} else {
				s.setValue("invert_vertical_levelization_layout",window()->graphWindow()->invertVerticalLevelizationLayout());
			}
			if (window()->graphWindow()->showLevelNumbers() == window()->graphWindow()->showLevelNumbersDefault()){
				s.remove("show_level_numbers");
			} else {
				s.setValue("show_level_numbers",window()->graphWindow()->showLevelNumbers());
			}
		s.endGroup();
		s.beginGroup("Fonts");
			if (window()->fonts()->pkgGroupFont() == window()->fonts()->pkgGroupFontDefault()){
				s.remove("pkg_group_font");
			} else {
				s.setValue("pkg_group_font",window()->fonts()->pkgGroupFont());
			}
			if (window()->fonts()->pkgFont() == window()->fonts()->pkgFontDefault()){
				s.remove("pkg_font");
			} else {
				s.setValue("pkg_font",window()->fonts()->pkgFont());
			}
			if (window()->fonts()->componentFont() == window()->fonts()->componentFontDefault()){
				s.remove("component_font");
			} else {
				s.setValue("component_font",window()->fonts()->componentFont());
			}
			if (window()->fonts()->classFont() == window()->fonts()->classFontDefault()){
				s.remove("class_font");
			} else {
				s.setValue("class_font",window()->fonts()->classFont());
			}
			if (window()->fonts()->structFont() == window()->fonts()->structFontDefault()){
				s.remove("struct_font");
			} else {
				s.setValue("struct_font",window()->fonts()->structFont());
			}
			if (window()->fonts()->enumFont() == window()->fonts()->enumFontDefault()){
				s.remove("enum_font");
			} else {
				s.setValue("enum_font",window()->fonts()->enumFont());
			}
		s.endGroup();
		s.beginGroup("Tools");
			if (window()->tools()->showText() == window()->tools()->showTextDefault()){
				s.remove("show_text");
			} else {
				s.setValue("show_text",window()->tools()->showText());
			}
		s.endGroup();
	s.endGroup();
	s.beginGroup("GraphLoadInfo");
		if (graphLoadInfo()->showIsARelation() == graphLoadInfo()->showIsARelationDefault()){
			s.remove("show_is_a_relation");
		} else {
			s.setValue("show_is_a_relation",graphLoadInfo()->showIsARelation());
		}
		if (graphLoadInfo()->showUsesInTheImplementationRelation() == graphLoadInfo()->showUsesInTheImplementationRelationDefault()){
			s.remove("show_uses_in_the_implementation_relation");
		} else {
			s.setValue("show_uses_in_the_implementation_relation",graphLoadInfo()->showUsesInTheImplementationRelation());
		}
		if (graphLoadInfo()->showUsesInTheInterfaceRelation() == graphLoadInfo()->showUsesInTheInterfaceRelationDefault()){
			s.remove("show_uses_in_the_interface_relation");
		} else {
			s.setValue("show_uses_in_the_interface_relation",graphLoadInfo()->showUsesInTheInterfaceRelation());
		}
		if (graphLoadInfo()->showClients() == graphLoadInfo()->showClientsDefault()){
			s.remove("show_clients");
		} else {
			s.setValue("show_clients",graphLoadInfo()->showClients());
		}
		if (graphLoadInfo()->showProviders() == graphLoadInfo()->showProvidersDefault()){
			s.remove("show_providers");
		} else {
			s.setValue("show_providers",graphLoadInfo()->showProviders());
		}
		if (graphLoadInfo()->showExternalEdges() == graphLoadInfo()->showExternalEdgesDefault()){
			s.remove("show_external_edges");
		} else {
			s.setValue("show_external_edges",graphLoadInfo()->showExternalEdges());
		}
	s.endGroup();
	s.beginGroup("CodeExtractor");
		if (codeExtractor()->lastConfigureJson() == codeExtractor()->lastConfigureJsonDefault()){
			s.remove("last_configure_json");
		} else {
			s.setValue("last_configure_json",codeExtractor()->lastConfigureJson());
		}
		if (codeExtractor()->lastSourceFolder() == codeExtractor()->lastSourceFolderDefault()){
			s.remove("last_source_folder");
		} else {
			s.setValue("last_source_folder",codeExtractor()->lastSourceFolder());
		}
		if (codeExtractor()->lastIgnorePattern() == codeExtractor()->lastIgnorePatternDefault()){
			s.remove("last_ignore_pattern");
		} else {
			s.setValue("last_ignore_pattern",codeExtractor()->lastIgnorePattern());
		}
	s.endGroup();
	s.beginGroup("CodeGeneration");
		if (codeGeneration()->lastOutputDir() == codeGeneration()->lastOutputDirDefault()){
			s.remove("last_output_dir");
		} else {
			s.setValue("last_output_dir",codeGeneration()->lastOutputDir());
		}
	s.endGroup();
}

void Preferences::load()
{
	QSettings s;
	s.beginGroup("Debug");
		debug()->setEnableSceneContextMenu(s.value("enable_scene_context_menu", false).value<bool>());
		debug()->setEnableDebugOutput(s.value("enable_debug_output", false).value<bool>());
		debug()->setStoreDebugOutput(s.value("store_debug_output", false).value<bool>());
	s.endGroup();
	s.beginGroup("Document");
		document()->setLastDocument(s.value("last_document", "").value<QString>());
		document()->setUseDependencyTypes(s.value("use_dependency_types", true).value<bool>());
		document()->setUseLakosianRules(s.value("use_lakosian_rules", true).value<bool>());
		document()->setAutoSaveBackupIntervalMsecs(s.value("auto_save_backup_interval_msecs", 1000).value<int>());
	s.endGroup();
	s.beginGroup("Window");
		s.beginGroup("GraphTab");
			window()->graphTab()->setShowMinimap(s.value("show_minimap", false).value<bool>());
			window()->graphTab()->setShowLegend(s.value("show_legend", false).value<bool>());
			window()->graphTab()->setClassLimit(s.value("class_limit", 2).value<int>());
			window()->graphTab()->setRelationLimit(s.value("relation_limit", 20).value<int>());
			window()->graphTab()->setZoomLevel(s.value("zoom_level", 100).value<int>());
			window()->graphTab()->setUpdateIntervalMsec(s.value("update_interval_msec", 500).value<int>());
		s.endGroup();
		s.beginGroup("GraphWindow");
			window()->graphWindow()->setDragModifier(s.value("drag_modifier", Qt::SHIFT).value<int>());
			window()->graphWindow()->setPanModifier(s.value("pan_modifier", Qt::ALT).value<int>());
			window()->graphWindow()->setZoomModifier(s.value("zoom_modifier", Qt::CTRL).value<int>());
			window()->graphWindow()->setMinimapSize(s.value("minimap_size", 10).value<int>());
			window()->graphWindow()->setColorBlindMode(s.value("color_blind_mode", false).value<bool>());
			window()->graphWindow()->setUseColorBlindFill(s.value("use_color_blind_fill", false).value<bool>());
			window()->graphWindow()->setBackgroundColor(s.value("background_color", QColor(Qt::white)).value<QColor>());
			window()->graphWindow()->setEntityBackgroundColor(s.value("entity_background_color", QColor(204, 229, 255)).value<QColor>());
			window()->graphWindow()->setSelectedEntityBackgroundColor(s.value("selected_entity_background_color", QColor(204, 229, 255)).value<QColor>());
			window()->graphWindow()->setEnableGradientOnMainNode(s.value("enable_gradient_on_main_node", true).value<bool>());
			window()->graphWindow()->setEdgeColor(s.value("edge_color", QColor(Qt::black)).value<QColor>());
			window()->graphWindow()->setHighlightEdgeColor(s.value("highlight_edge_color", QColor(Qt::red)).value<QColor>());
			window()->graphWindow()->setLakosEntityNamePos(s.value("lakos_entity_name_pos", Qt::BottomLeftCorner).value<Qt::Corner>());
			window()->graphWindow()->setShowRedundantEdgesDefault(s.value("show_redundant_edges_default", false).value<bool>());
			window()->graphWindow()->setHidePackagePrefixOnComponents(s.value("hide_package_prefix_on_components", false).value<bool>());
			window()->graphWindow()->setInvertHorizontalLevelizationLayout(s.value("invert_horizontal_levelization_layout", false).value<bool>());
			window()->graphWindow()->setInvertVerticalLevelizationLayout(s.value("invert_vertical_levelization_layout", false).value<bool>());
			window()->graphWindow()->setShowLevelNumbers(s.value("show_level_numbers", true).value<bool>());
		s.endGroup();
		s.beginGroup("Fonts");
			window()->fonts()->setPkgGroupFont(s.value("pkg_group_font", qApp->font()).value<QFont>());
			window()->fonts()->setPkgFont(s.value("pkg_font", qApp->font()).value<QFont>());
			window()->fonts()->setComponentFont(s.value("component_font", qApp->font()).value<QFont>());
			window()->fonts()->setClassFont(s.value("class_font", qApp->font()).value<QFont>());
			window()->fonts()->setStructFont(s.value("struct_font", qApp->font()).value<QFont>());
			window()->fonts()->setEnumFont(s.value("enum_font", qApp->font()).value<QFont>());
		s.endGroup();
		s.beginGroup("Tools");
			window()->tools()->setShowText(s.value("show_text", true).value<bool>());
		s.endGroup();
	s.endGroup();
	s.beginGroup("GraphLoadInfo");
		graphLoadInfo()->setShowIsARelation(s.value("show_is_a_relation", true).value<bool>());
		graphLoadInfo()->setShowUsesInTheImplementationRelation(s.value("show_uses_in_the_implementation_relation", true).value<bool>());
		graphLoadInfo()->setShowUsesInTheInterfaceRelation(s.value("show_uses_in_the_interface_relation", true).value<bool>());
		graphLoadInfo()->setShowClients(s.value("show_clients", true).value<bool>());
		graphLoadInfo()->setShowProviders(s.value("show_providers", false).value<bool>());
		graphLoadInfo()->setShowExternalEdges(s.value("show_external_edges", false).value<bool>());
	s.endGroup();
	s.beginGroup("CodeExtractor");
		codeExtractor()->setLastConfigureJson(s.value("last_configure_json", "").value<QString>());
		codeExtractor()->setLastSourceFolder(s.value("last_source_folder", "").value<QString>());
		codeExtractor()->setLastIgnorePattern(s.value("last_ignore_pattern", "*.t.cpp,*.m.cpp,moc_*.cpp,*standalone*,*thirdparty*").value<QString>());
	s.endGroup();
	s.beginGroup("CodeGeneration");
		codeGeneration()->setLastOutputDir(s.value("last_output_dir", "").value<QString>());
	s.endGroup();
}

Preferences* Preferences::self()
{
	static Preferences s;
	return &s;
}
// clang-format on
