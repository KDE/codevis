// DO NOT EDIT THIS FILE
// This file was automatically generated by configuration-parser
// There will be a .conf file somewhere which was used to generate this file
// See https://github.com/tcanabrava/configuration-parser

#include "test-namespace.h"
#include <KConfig>
#include <KConfigGroup>
#include <KSharedConfig>

namespace Conf {

InnerInnerPrefs1::InnerInnerPrefs1(QObject *parent) : QObject(parent),
	_blah(0)
{
}

int InnerInnerPrefs1::blah() const
{
	return _blah;
}

void InnerInnerPrefs1::setBlah(int value)
{
	if (_blah==value) {
		return;
	}
	if (blahRule && !blahRule(value)) {
		return;
	}
	_blah = value;
	Q_EMIT blahChanged(value);
}

void InnerInnerPrefs1::setBlahRule(std::function<bool(int)> rule)
{
	blahRule = rule;
}

int InnerInnerPrefs1::blahDefault() const
{
	return 0;
}
void InnerInnerPrefs1::loadDefaults()
{
	setBlah(0);
}
InnerPrefs1::InnerPrefs1(QObject *parent) : QObject(parent),
	_innerInnerPrefs1(new InnerInnerPrefs1(this))
{
}

InnerInnerPrefs1* InnerPrefs1::innerInnerPrefs1() const
{
	return _innerInnerPrefs1;
}

void InnerPrefs1::loadDefaults()
{
	_innerInnerPrefs1->loadDefaults();
}
InnerPrefs2::InnerPrefs2(QObject *parent) : QObject(parent)
{
}

void InnerPrefs2::loadDefaults()
{
}
Preferences::Preferences(QObject *parent) : QObject(parent),
	_innerPrefs1(new InnerPrefs1(this)),
	_innerPrefs2(new InnerPrefs2(this))
{
	load();
}

InnerPrefs1* Preferences::innerPrefs1() const
{
	return _innerPrefs1;
}

InnerPrefs2* Preferences::innerPrefs2() const
{
	return _innerPrefs2;
}

void Preferences::loadDefaults()
{
	_innerPrefs1->loadDefaults();
	_innerPrefs2->loadDefaults();
}
void Preferences::sync()
{
	KSharedConfigPtr internal_config = KSharedConfig::openConfig();

	KConfigGroup innerPrefs1Group = internal_config->group("InnerPrefs1");

	KConfigGroup innerInnerPrefs1Group = innerPrefs1Group.group("InnerInnerPrefs1");
	if (innerPrefs1()->innerInnerPrefs1()->blah() == innerPrefs1()->innerInnerPrefs1()->blahDefault()){
		innerInnerPrefs1Group.deleteEntry("blah");
	} else { 
		innerInnerPrefs1Group.writeEntry("blah",innerPrefs1()->innerInnerPrefs1()->blah());
	}

	KConfigGroup innerPrefs2Group = internal_config->group("InnerPrefs2");
}

void Preferences::load()
{
	KSharedConfigPtr internal_config = KSharedConfig::openConfig();

	KConfigGroup innerPrefs1Group = internal_config->group("InnerPrefs1");

	KConfigGroup innerInnerPrefs1Group = innerPrefs1Group.group("InnerInnerPrefs1");
	innerPrefs1()->innerInnerPrefs1()->setBlah(innerInnerPrefs1Group.readEntry<int>("blah", 0));

	KConfigGroup innerPrefs2Group = internal_config->group("InnerPrefs2");
}

Preferences* Preferences::self()
{
	static Preferences s;
	return &s;
}
}
