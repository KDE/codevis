// DO NOT EDIT THIS FILE
// This file was automatically generated by configuration-parser
// There will be a .conf file somewhere which was used to generate this file
// See https://github.com/tcanabrava/configuration-parser

#include "test-simple-prefs.h"
#include <QSettings>

Status::Status(QObject *parent) : QObject(parent),
	_strength(10),
	_wisdom(10),
	_agility(10),
	_inteligence(10)
{
}

int Status::strength() const
{
	return _strength;
}

int Status::wisdom() const
{
	return _wisdom;
}

int Status::agility() const
{
	return _agility;
}

int Status::inteligence() const
{
	return _inteligence;
}

void Status::setStrength(int value)
{
	if (_strength==value) {
		return;
	}
	if (strengthRule && !strengthRule(value)) {
		return;
	}
	_strength = value;
	Q_EMIT strengthChanged(value);
}

void Status::setWisdom(int value)
{
	if (_wisdom==value) {
		return;
	}
	if (wisdomRule && !wisdomRule(value)) {
		return;
	}
	_wisdom = value;
	Q_EMIT wisdomChanged(value);
}

void Status::setAgility(int value)
{
	if (_agility==value) {
		return;
	}
	if (agilityRule && !agilityRule(value)) {
		return;
	}
	_agility = value;
	Q_EMIT agilityChanged(value);
}

void Status::setInteligence(int value)
{
	if (_inteligence==value) {
		return;
	}
	if (inteligenceRule && !inteligenceRule(value)) {
		return;
	}
	_inteligence = value;
	Q_EMIT inteligenceChanged(value);
}

void Status::setStrengthRule(std::function<bool(int)> rule)
{
	strengthRule = rule;
}

void Status::setWisdomRule(std::function<bool(int)> rule)
{
	wisdomRule = rule;
}

void Status::setAgilityRule(std::function<bool(int)> rule)
{
	agilityRule = rule;
}

void Status::setInteligenceRule(std::function<bool(int)> rule)
{
	inteligenceRule = rule;
}

int Status::strengthDefault() const
{
	return 10;
}
int Status::wisdomDefault() const
{
	return 10;
}
int Status::agilityDefault() const
{
	return 10;
}
int Status::inteligenceDefault() const
{
	return 10;
}
void Status::loadDefaults()
{
	setStrength(10);
	setWisdom(10);
	setAgility(10);
	setInteligence(10);
}
Equipment::Equipment(QObject *parent) : QObject(parent)
{
}

void Equipment::loadDefaults()
{
}
Character::Character(QObject *parent) : QObject(parent),
	_status(new Status(this)),
	_equipment(new Equipment(this)),
	_name(QStringLiteral("John Who")),
	_age(18),
	_gold(100),
	_playerRace(HUMAN)
{
}

QString Character::name() const
{
	return _name;
}

int Character::age() const
{
	return _age;
}

int Character::gold() const
{
	return _gold;
}

race Character::playerRace() const
{
	return _playerRace;
}

Status* Character::status() const
{
	return _status;
}

Equipment* Character::equipment() const
{
	return _equipment;
}

void Character::setName(const QString& value)
{
	if (_name==value) {
		return;
	}
	if (nameRule && !nameRule(value)) {
		return;
	}
	_name = value;
	Q_EMIT nameChanged(value);
}

void Character::setAge(int value)
{
	if (_age==value) {
		return;
	}
	if (ageRule && !ageRule(value)) {
		return;
	}
	_age = value;
	Q_EMIT ageChanged(value);
}

void Character::setGold(int value)
{
	if (_gold==value) {
		return;
	}
	if (goldRule && !goldRule(value)) {
		return;
	}
	_gold = value;
	Q_EMIT goldChanged(value);
}

void Character::setPlayerRace(const race& value)
{
	if (_playerRace==value) {
		return;
	}
	if (playerRaceRule && !playerRaceRule(value)) {
		return;
	}
	_playerRace = value;
	Q_EMIT playerRaceChanged(value);
}

void Character::setNameRule(std::function<bool(QString)> rule)
{
	nameRule = rule;
}

void Character::setAgeRule(std::function<bool(int)> rule)
{
	ageRule = rule;
}

void Character::setGoldRule(std::function<bool(int)> rule)
{
	goldRule = rule;
}

void Character::setPlayerRaceRule(std::function<bool(race)> rule)
{
	playerRaceRule = rule;
}

QString Character::nameDefault() const
{
	return QStringLiteral("John Who");
}
int Character::ageDefault() const
{
	return 18;
}
int Character::goldDefault() const
{
	return 100;
}
race Character::playerRaceDefault() const
{
	return HUMAN;
}
void Character::loadDefaults()
{
	_status->loadDefaults();
	_equipment->loadDefaults();
	setName(QStringLiteral("John Who"));
	setAge(18);
	setGold(100);
	setPlayerRace(HUMAN);
}
Preferences::Preferences(QObject *parent) : QObject(parent),
	_character(new Character(this))
{
	load();
}

QString Preferences::name() const
{
	return _name;
}

int Preferences::age() const
{
	return _age;
}

Character* Preferences::character() const
{
	return _character;
}

void Preferences::setName(const QString& value)
{
	if (_name==value) {
		return;
	}
	if (nameRule && !nameRule(value)) {
		return;
	}
	_name = value;
	Q_EMIT nameChanged(value);
}

void Preferences::setAge(int value)
{
	if (_age==value) {
		return;
	}
	if (ageRule && !ageRule(value)) {
		return;
	}
	_age = value;
	Q_EMIT ageChanged(value);
}

void Preferences::setNameRule(std::function<bool(QString)> rule)
{
	nameRule = rule;
}

void Preferences::setAgeRule(std::function<bool(int)> rule)
{
	ageRule = rule;
}

void Preferences::loadDefaults()
{
	_character->loadDefaults();
}
void Preferences::sync()
{
	QSettings s;
	s.beginGroup("Character");
		s.beginGroup("Status");
			if (character()->status()->strength() == character()->status()->strengthDefault()){
				s.remove("strength");
			} else { 
				s.setValue("strength",character()->status()->strength());
			}
			if (character()->status()->wisdom() == character()->status()->wisdomDefault()){
				s.remove("wisdom");
			} else { 
				s.setValue("wisdom",character()->status()->wisdom());
			}
			if (character()->status()->agility() == character()->status()->agilityDefault()){
				s.remove("agility");
			} else { 
				s.setValue("agility",character()->status()->agility());
			}
			if (character()->status()->inteligence() == character()->status()->inteligenceDefault()){
				s.remove("inteligence");
			} else { 
				s.setValue("inteligence",character()->status()->inteligence());
			}
		s.endGroup();
		s.beginGroup("Equipment");
		s.endGroup();
		if (character()->name() == character()->nameDefault()){
			s.remove("name");
		} else { 
			s.setValue("name",character()->name());
		}
		if (character()->age() == character()->ageDefault()){
			s.remove("age");
		} else { 
			s.setValue("age",character()->age());
		}
		if (character()->gold() == character()->goldDefault()){
			s.remove("gold");
		} else { 
			s.setValue("gold",character()->gold());
		}
		if (character()->playerRace() == character()->playerRaceDefault()){
			s.remove("player_race");
		} else { 
			s.setValue("player_race",(int) character()->playerRace());
		}
	s.endGroup();
	if (name() == nameDefault()){
		s.remove("name");
	} else { 
		s.setValue("name",name());
	}
	if (age() == ageDefault()){
		s.remove("age");
	} else { 
		s.setValue("age",age());
	}
}

void Preferences::load()
{
	QSettings s;
	s.beginGroup("Character");
		s.beginGroup("Status");
			character()->status()->setStrength(s.value("strength", 10).value<int>());
			character()->status()->setWisdom(s.value("wisdom", 10).value<int>());
			character()->status()->setAgility(s.value("agility", 10).value<int>());
			character()->status()->setInteligence(s.value("inteligence", 10).value<int>());
		s.endGroup();
		s.beginGroup("Equipment");
		s.endGroup();
		character()->setName(s.value("name", QStringLiteral("John Who")).value<QString>());
		character()->setAge(s.value("age", 18).value<int>());
		character()->setGold(s.value("gold", 100).value<int>());
		character()->setPlayerRace((race)s.value("player_race", HUMAN).value<race>());
	s.endGroup();
	setName(s.value("name").value<QString>());
	setAge(s.value("age").value<int>());
}

Preferences* Preferences::self()
{
	static Preferences s;
	return &s;
}
